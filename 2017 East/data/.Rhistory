install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library("devtools")
library(devtools)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(statsr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
library(dplyr)
library(ggplot2)
library(statsr)
arbuthnot
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
arbuthnot$girls
arbuthnot[girls]
arbuthnot$year
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = boys)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
ggplot(data = arbuthnot, aes(x = year, y = girls)) geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = boys)) + geom_point()
?ggplot
arbuthnot$girls + arbuthnot$boys
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line() + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = boys)) + geom_line() + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_line() + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line() + geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
ggplot(data = arbuthnot, aes(x = year, y = more_boys)) + geom_line() + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = more_boys)) + geom_point()
data("present")
preset
present
?range
range(present$year)
present <- present %>%
mutate(total = boys + girls)
present <- present %>%
mutate(prop_boys = boys / total)
ggplot(data = present aes(x = year, y = total)) + geom_point()
?ggplot()
ggplot(data = present, aes(x = year, y = total)) + geom_point()
ggplot(data = present, aes(x = year, y = total)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = girls)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = girls)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_line()
present <- present %>%
mutate(more_boys = boys > girls)
ggplot(data = present, aes(x = year, y = more_bys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = more_boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_histogram()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_area()
ggplot(data = present, aes(x = year, y = boys)) + geom_point() + geom_area()
ggplot(data = present, aes(x = year, y = boys)) + geom_point() + geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_line()
present <- present %>%
mutate(prop_boy_girl = boys / girls)
ggplot(data = present, aes(x = year, y = prop_boy_girl)) + geom_point() + geom_line()
present %>%
mutate(total = ?) %>%
arrange(desc(total))
present <- present %>%
mutate(total = ?) %>%
arrange(desc(total))
sort(present, decreasing=TRUE)
arrange(present, desc(total))
View(present)
$girls
present$girls
go()
View(present)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point() + geom_line()
data("present")
prsent
present
present <- present %>% mutate(total = boys + girls)
ggplot(data = present, aes(x = year, y = total)) +
geom_point() + geom_line()
present <- present %>% mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys)) +
geom_point() + geom_line()
present <- present %>% mutate(more_boys = boys > girls)
ggplot(data = present, aes(x = year, y = more_boys)) +
geom_point() + geom_line()
dim(arbuthnot)
# type your code for the Exercise here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = boys/total)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
# type your code for the Exercise here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = boys/total)) +
geom_line() +
geom_point()
# type your code for Exercise here, and Knit
range(present$year,na.rm=TRUE)
# type your code for Question 5 here, and Knit
present <- present %>% mutate(total = boys + girls)
present <- present %>% mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point() + geom_line()
# type your code for Question 6 here, and Knit
ggplot(data = present, aes(x = year, y = boys > girls)) + geom_point() + geom_line()
arbuthnot
dim(arbuthnot)
# type your code for Question 4 here, and Knit
dim(arbuthnot)
# type your code for Question 4 here, and Knit
dim(present)
# type your code for Question 7 here, and Knit
ggplot(data = present, aes(x = year, y = boys/girls)) + geom_point() + geom_line()
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
#present %>%
#  mutate(total = ?) %>%
#  arrange(desc(total))
present %>%  mutate(total = boys + girls) %>% arrange(desc(total))
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
?nycflights
?nycflights13
str(nycflights)
dim(nycflights)
??ggplot
?ggplot
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 30)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 30)
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_flights <- nycflights %>% filter(dest == "SFO", month = "2")
sfo_flights <- nycflights %>% filter(dest == "SFO", month == "2")
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == "2")
remove(sfo_flights)
nrow(sfo_feb_flights)
r sfo_feb_flights
View(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_dd = median(arr_delay), iqr_dd = iqr(arr_delay), n = n())
?summarise
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_dd = median(arr_delay), iqr_dd = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_line()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_point()
View(sfo_feb_flights)
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>% mutate(dep_type, ifelse(dep_delay > 5, "delayed", "on time"))
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay > 5, "delayed", "on time"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# type your code for Question 5 here, and Knit
nycflights %>%
+   group_by(month) %>%
+   summarise(median_dd = median(dep_delay)) %>%
+   arrange(desc(median_dd))
# type your code for Question 4 here, and Knit
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# type your code for Question 5 here, and Knit
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
22.737/7.579
23.64/7.88
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_percent = (sum(dep_type == "on time") * 100) / n()) %>%
arrange(desc(ot_dep_percent))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights %>%
+   group_by(origin) %>%
+   summarise(ot_dep_percent = ot_dep_rate * 100) %>%
+   arrange(desc(ot_dep_percent))
dim(nycflights)
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_percent = ot_dep_rate * 100) %>%
arrange(desc(ot_dep_percent))
# type your code for Question 7 here, and Knit
nycflights <- nycflights %>%
+   mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
dim nycflights
dim(nycflights)
names(nycflights)
nycflights <- nycflights %>% mutate(avg_speed = distance/(air_time / 60))
nycflights%avg_speed
nycflights$avg_speed
# type your code for Question 7 here, and Knit
nycflights <- nycflights %>%
+   mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
#' twitter: @tkwartler
#' ODSC Workshop: Intro to Text Mining using R
#' 5-4-17
#' 5.0 Simple Wordcloud
setwd('C:/Users/gmudumbai/Desktop/ODSC/text_analytics/ODSC_Workshop/2017 East/data')
library(tm)
library(wordcloud)
library(RColorBrewer)
options(stringsAsFactors = FALSE)
Sys.setlocale('LC_ALL','C')
tryTolower <- function(x){
y = NA
try_error = tryCatch(tolower(x), error = function(e) e)
if (!inherits(try_error, 'error'))
y = tolower(x)
return(y)
}
clean.corpus<-function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tryTolower))
corpus <- tm_map(corpus, removeWords, custom.stopwords)
return(corpus)
}
custom.stopwords <- c(stopwords('english'), 'lol', 'smh', 'amp', 'chardonnay')
bigram.tokenizer <-function(x){
unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
}
text<-read.csv('chardonnay.csv', header=TRUE)
custom.reader <- readTabular(mapping=list(content="text", id="id"))
corpus <- VCorpus(DataframeSource(text),
readerControl=list(reader=custom.reader))
corpus<-clean.corpus(corpus)
tdm<-TermDocumentMatrix(corpus, control=list(tokenize=bigram.tokenizer))
tdm.m <- as.matrix(tdm)
tdm.m[1000:1005,1:10]
tdm.v <- sort(rowSums(tdm.m),decreasing=TRUE)
tdm.df <- data.frame(word = names(tdm.v),freq=tdm.v)
display.brewer.all()
pal <- brewer.pal(8, "Blues")
pal <- pal[-(1:2)]
set.seed(1234)
wordcloud(tdm.df$word,tdm.df$freq,max.words=50, random.order=FALSE, colors=pal)
source('C:/Users/gmudumbai/Desktop/ODSC/text_analytics/ODSC_Workshop/2017 East/6_Other_Wordclouds.R')
source('C:/Users/gmudumbai/Desktop/ODSC/text_analytics/ODSC_Workshop/2017 East/6_Other_Wordclouds.R')
setwd('C:/Users/gmudumbai/Desktop/ODSC/text_analytics/ODSC_Workshop/2017 East/data')
source('C:/Users/gmudumbai/Desktop/ODSC/text_analytics/ODSC_Workshop/2017 East/6_Other_Wordclouds.R')
